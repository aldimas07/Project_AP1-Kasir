/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package a;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static project_ap1_kasir.koneksi.con;

/**
 *
 * @author ACER
 */
public class pesanan extends javax.swing.JFrame {
    public String ld_kasir;
    private setelah_pesan stlah_psn;

    private static String ls_idpesanan, get_idpembayaran, get_noantrian;

    /**
     * Creates new form pesanan
     */
    public pesanan() {
        initComponents();
        tampil_tabel_tunggupesanan();
        tampil_tabel_konfirmasipesanan();
        tampil_tabel_batalpesanan();
    }
    public void setLdKasir(String ld_kasir) {
        this.ld_kasir = ld_kasir;
    }
    public void setStlhPsn(setelah_pesan stlh_psn) {
        this.stlah_psn = stlh_psn;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabel_tunggupesanan = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabel_konfirmasipesanan = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabel_batalpesanan = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        lbl_batal = new javax.swing.JLabel();
        lbl_terima = new javax.swing.JLabel();
        lbl_back = new javax.swing.JLabel();
        lbl_riwayat = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        tabel_tunggupesanan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Pesanan", "No Antrian", "Total Bayar"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabel_tunggupesanan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabel_tunggupesananMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabel_tunggupesanan);
        if (tabel_tunggupesanan.getColumnModel().getColumnCount() > 0) {
            tabel_tunggupesanan.getColumnModel().getColumn(0).setResizable(false);
            tabel_tunggupesanan.getColumnModel().getColumn(1).setResizable(false);
            tabel_tunggupesanan.getColumnModel().getColumn(2).setResizable(false);
        }

        jPanel1.add(jScrollPane1);

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 420, 460));

        tabel_konfirmasipesanan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Pesanan", "No Antrian", "Total Bayar"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabel_konfirmasipesanan);
        if (tabel_konfirmasipesanan.getColumnModel().getColumnCount() > 0) {
            tabel_konfirmasipesanan.getColumnModel().getColumn(0).setResizable(false);
            tabel_konfirmasipesanan.getColumnModel().getColumn(1).setResizable(false);
            tabel_konfirmasipesanan.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 70, 300, 220));

        tabel_batalpesanan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Pesanan", "No Antrian", "Total Bayar"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tabel_batalpesanan);
        if (tabel_batalpesanan.getColumnModel().getColumnCount() > 0) {
            tabel_batalpesanan.getColumnModel().getColumn(0).setResizable(false);
            tabel_batalpesanan.getColumnModel().getColumn(1).setResizable(false);
            tabel_batalpesanan.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 360, 300, 210));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gambar/pesanan rev.jpg"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        lbl_batal.setText("jLabel1");
        lbl_batal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_batalMouseClicked(evt);
            }
        });
        getContentPane().add(lbl_batal, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, 140, 40));

        lbl_terima.setText("jLabel3");
        lbl_terima.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_terimaMouseClicked(evt);
            }
        });
        getContentPane().add(lbl_terima, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 550, 110, 40));

        lbl_back.setText("jLabel1");
        lbl_back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_backMouseClicked(evt);
            }
        });
        getContentPane().add(lbl_back, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 4, 50, 20));

        lbl_riwayat.setText("jLabel1");
        lbl_riwayat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_riwayatMouseClicked(evt);
            }
        });
        getContentPane().add(lbl_riwayat, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 0, 40, 30));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lbl_terimaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_terimaMouseClicked
        // TODO add your handling code here:

        if (ls_idpesanan == null && ls_idpesanan == "") {
            JOptionPane.showMessageDialog(this, "Silakan Pilih salah satu pesanan!");

        } else {
            int opsi = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin akan menerima pesanan ini?");
            if (opsi == JOptionPane.YES_OPTION) {
                try {
//                    String sql = "SELECT riwayat_pesanan.NO_ANTRIAN, riwayat_pesanan.ID_BAYAR, riwayat_pesanan.STATUS from riwayat_pesanan WHERE riwayat_pesanan.NO_ANTRIAN = ?";
                    String sql = "SELECT * FROM riwayat_pesanan "
                            + " WHERE riwayat_pesanan.NO_ANTRIAN = '" + get_noantrian + "'";
                    PreparedStatement pst = (PreparedStatement) con.prepareStatement(sql);
//                    pst.setString(1, ls_idpesanan);
                    ResultSet rs = pst.executeQuery();
                    if (rs.next()) {
                        PreparedStatement pst_terimaupdate = (PreparedStatement) con.prepareStatement("INSERT INTO terima (ID_PESANAN, LD_KASIR, NO_ANTRIAN, ID_BAYAR) values (?,?,?,?)");
                        pst_terimaupdate.setString(1, ls_idpesanan);
                        pst_terimaupdate.setString(2, ld_kasir);
                        pst_terimaupdate.setString(3, get_noantrian);
                        pst_terimaupdate.setString(4, get_idpembayaran);
                        pst_terimaupdate.executeUpdate();
                    }
//                    PreparedStatement dropwait = con.prepareStatement("delete from riwayat")
                    JOptionPane.showMessageDialog(this, "Pesanan telah dikonfirmasi!");
                    update_table_konfirmasi();
                } catch (Exception e) {
                    System.out.println(e.getMessage() + "- button terima bermasalah");
                }
                update_table_tunggu();
            } else {
                JOptionPane.showMessageDialog(this, "Perintah dibatalkan!");
            }
        }
    }//GEN-LAST:event_lbl_terimaMouseClicked

    private void tabel_tunggupesananMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabel_tunggupesananMouseClicked
        // TODO add your handling code here:
        int baris = tabel_tunggupesanan.rowAtPoint(evt.getPoint());
        ls_idpesanan = tabel_tunggupesanan.getValueAt(baris, 0).toString();
        get_noantrian = tabel_tunggupesanan.getValueAt(baris, 1).toString();
        get_idpembayaran = tabel_tunggupesanan.getValueAt(baris, 2).toString();
    }//GEN-LAST:event_tabel_tunggupesananMouseClicked

    private void lbl_batalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_batalMouseClicked
        // TODO add your handling code here:
        if (ls_idpesanan == null && ls_idpesanan == "") {
            JOptionPane.showMessageDialog(this, "Silakan Pilih salah satu pesanan!");

        } else {
            int opsi = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin akan membatalkan pesanan ini?");
            if (opsi == JOptionPane.YES_OPTION) {
                try {
                    String sql = "SELECT * FROM riwayat_pesanan WHERE riwayat_pesanan.NO_ANTRIAN = '" + get_noantrian + "'";
                    PreparedStatement pst = (PreparedStatement) con.prepareStatement(sql);
//                    pst.setString(1, ls_idpesanan);
                    ResultSet rs = pst.executeQuery();
                    if (rs.next()) {
                        PreparedStatement pst_terimaupdate = (PreparedStatement) con.prepareStatement("INSERT INTO tolak (ID_PESANAN, LD_KASIR, NO_ANTRIAN, ID_BAYAR) values (?,?,?,?)");
//                        pst_terimaupdate.setString(1, ls_idpesanan);
                        pst_terimaupdate.setString(1, ls_idpesanan);
                        pst_terimaupdate.setString(2, ld_kasir);
                        pst_terimaupdate.setString(3, get_noantrian);
                        pst_terimaupdate.setString(4, get_idpembayaran);
                        pst_terimaupdate.executeUpdate();
                    }
                    JOptionPane.showMessageDialog(this, "Pesanan berhasil dibatalkan!");
                    update_table_batal();

                } catch (Exception e) {
                    System.out.println(e.getMessage() + "- button BATAL bermasalah");
                }
                update_table_tunggu();
            } else {
                JOptionPane.showMessageDialog(this, "Perintah dibatalkan!");
            }
        }
    }//GEN-LAST:event_lbl_batalMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        stlah_psn.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void lbl_backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_backMouseClicked
        // TODO add your handling code here:
        int opsi = JOptionPane.showConfirmDialog(this, "Apakah Anda ingin kembali ke halaman setelah_pesan?");
        if (opsi == JOptionPane.YES_OPTION) { 
            this.dispose();
            setelah_pesan i = new setelah_pesan();
            i.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Perintah dibatalkan!");
        }
    }//GEN-LAST:event_lbl_backMouseClicked

    private void lbl_riwayatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_riwayatMouseClicked
        // TODO add your handling code here:
        int opsi = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menuju halaman riwayat_pesanan?");
        if (opsi == JOptionPane.YES_OPTION) {
            this.dispose();
            riwayat_pesanan i = new riwayat_pesanan();
            i.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Perintah dibatalkan!");
        }
    }//GEN-LAST:event_lbl_riwayatMouseClicked

    private void tampil_tabel_tunggupesanan() {
        try {
//            String sql = "SELECT transaksi.ID_TRANSAKSI, transaksi.ID_PEMBAYARAN, riwayat_pesanan.STATUS, transaksi.NO_ANTRIAN FROM transaksi\n"
//                    + "INNER JOIN riwayat_pesanan ON riwayat_pesanan.ID_PESANAN = transaksi.ID_PESANAN where riwayat_pesanan.STATUS = 'Menunggu' or 'menunggu'";
//            String sql = "SELECT transaksi.NO_ANTRIAN, pembayaran.NAMA , riwayat_pesanan.STATUS, transaksi.NO_ANTRIAN"
//                    + " FROM transaksi"
//                    + " INNER JOIN riwayat_pesanan ON riwayat_pesanan.NO_ANTRIAN = transaksi.NO_ANTRIAN"
//                    + " INNER join pembayaran on transaksi.ID_PEMBAYARAN = pembayaran.ID_PEMBAYARAN"
//                    + " where riwayat_pesanan.STATUS = 'Menunggu' or 'menunggu'";

            String sql = "SELECT * FROM `riwayat_pesanan` where ID_PESANAN not in (select ID_PESANAN from terima) and ID_PESANAN not in (select ID_PESANAN from tolak)";
            PreparedStatement pstunggu_pesan = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = pstunggu_pesan.executeQuery();
            DefaultTableModel tb_tunggupesanan = (DefaultTableModel) tabel_tunggupesanan.getModel();
            tb_tunggupesanan.setRowCount(0);
            int ambil_row = tabel_tunggupesanan.getSelectedRow();
//            get_noantrian = tb_tunggupesanan.getValueAt(ambil_row, 1).toString();

            while (rs.next()) {
                Object data[] = new Object[3];
                data[0] = rs.getString("ID_PESANAN");
                data[1] = rs.getString("NO_ANTRIAN");
                data[2] = rs.getString("ID_BAYAR");
                tb_tunggupesanan.addRow(data);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage() + "- tampil_tabel_tunggupesanan");
        }
    }

    private void tampil_tabel_konfirmasipesanan() {
        try {
//            String sql = "SELECT transaksi.NO_ANTRIAN, pembayaran.NAMA , riwayat_pesanan.STATUS, transaksi.NO_ANTRIAN FROM transaksi INNER JOIN riwayat_pesanan ON riwayat_pesanan.NO_ANTRIAN = transaksi.NO_ANTRIAN INNER join pembayaran on transaksi.ID_PEMBAYARAN = pembayaran.ID_PEMBAYARAN where riwayat_pesanan.STATUS = 'Terkonfirmasi' or 'terkonfirmasi'";

//            String sql = "SELECT riwayat_pesanan.ID_PESANAN, riwayat_pesanan.ID_BAYAR, riwayat_pesanan.STATUS from riwayat_pesanan "
//                    + "where riwayat_pesanan.STATUS = ";
            String sql = "SELECT * FROM terima group by no_antrian";
            PreparedStatement pskonfirmasi_pesan = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = pskonfirmasi_pesan.executeQuery();
            DefaultTableModel tb_konfirmasipesanan = (DefaultTableModel) tabel_konfirmasipesanan.getModel();
            tb_konfirmasipesanan.setRowCount(0);

            while (rs.next()) {
                Object data[] = new Object[3];
                data[0] = rs.getString("ID_PESANAN");
                data[1] = rs.getString("NO_ANTRIAN");
                data[2] = rs.getString("ID_BAYAR");
                tb_konfirmasipesanan.addRow(data);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage() + " - tampil_tabel_konfirmasi pesanan");
        }
    }

    private void tampil_tabel_batalpesanan() {
        try {
            String sql = "SELECT * FROM tolak group by no_antrian";
            PreparedStatement psbatal_pesan = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = psbatal_pesan.executeQuery();
            DefaultTableModel tb_batalpesanan = (DefaultTableModel) tabel_batalpesanan.getModel();
            tb_batalpesanan.setRowCount(0);

            while (rs.next()) {
                Object data[] = new Object[3];
                data[0] = rs.getString("ID_PESANAN");
                data[1] = rs.getString("NO_ANTRIAN");
                data[2] = rs.getString("ID_BAYAR");
                tb_batalpesanan.addRow(data);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage() + " - tampil_tabel_batal pesanan");
        }
    }

    private void update_table_tunggu() {
        try {
//            String sqltunggu = "SELECT transaksi.ID_TRANSAKSI, transaksi.ID_PEMBAYARAN, riwayat_pesanan.STATUS, transaksi.NO_ANTRIAN FROM transaksi\n"
//                    + "INNER JOIN riwayat_pesanan ON riwayat_pesanan.ID_PESANAN = transaksi.ID_PESANAN where riwayat_pesanan.STATUS = 'Menunggu' or 'menunggu'";
            String sqltunggu = "SELECT * FROM `riwayat_pesanan` where ID_PESANAN not in (select ID_PESANAN from terima) and ID_PESANAN not in (select ID_PESANAN from tolak)";
            PreparedStatement pst = (PreparedStatement) con.prepareStatement(sqltunggu);
            ResultSet rs = pst.executeQuery();
            ResultSetMetaData stData = rs.getMetaData();
            int q = stData.getColumnCount();
            DefaultTableModel tb_tunggu = (DefaultTableModel) tabel_tunggupesanan.getModel();
            tb_tunggu.setRowCount(0);

            while (rs.next()) {
                Vector columndata = new Vector();
                for (int i = 1; i < q; i++) {
                    columndata.add(rs.getString("ID_PESANAN"));
                    columndata.add(rs.getString("NO_ANTRIAN"));
                    columndata.add(rs.getString("ID_BAYAR"));
                }
                tb_tunggu.addRow(columndata);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage() + " - update_table_tunggu");
        }
    }

    private void update_table_konfirmasi() {
        try {
//            String sqlkonfirmasi = "SELECT riwayat_pesanan.ID_PESANAN, riwayat_pesanan.ID_BAYAR, riwayat_pesanan.STATUS from riwayat_pesanan";
            String sqlkonfirmasi = "SELECT terima.ID_PESANAN, terima.NO_ANTRIAN, terima.ID_BAYAR FROM terima";
            PreparedStatement pst = (PreparedStatement) con.prepareStatement(sqlkonfirmasi);
            ResultSet rs = pst.executeQuery();
            ResultSetMetaData stData = rs.getMetaData();
            int q = stData.getColumnCount();
            DefaultTableModel tb_konfirmasi = (DefaultTableModel) tabel_konfirmasipesanan.getModel();
            tb_konfirmasi.setRowCount(0);

            while (rs.next()) {
                Vector columndata = new Vector();
                for (int i = 1; i < q; i++) {
                    columndata.add(rs.getString("ID_PESANAN"));
                    columndata.add(rs.getString("NO_ANTRIAN"));
                    columndata.add(rs.getString("ID_BAYAR"));
                }
                tb_konfirmasi.addRow(columndata);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage() + " - update_table_konfirmasi");
        }
    }

    private void update_table_batal() {
        try {
            String sqlbatal = "SELECT tolak.ID_PESANAN, tolak.NO_ANTRIAN, tolak.ID_BAYAR FROM tolak";
            PreparedStatement pst = (PreparedStatement) con.prepareStatement(sqlbatal);
            ResultSet rs = pst.executeQuery();
            ResultSetMetaData stData = rs.getMetaData();
            int q = stData.getColumnCount();
            DefaultTableModel tb_batal = (DefaultTableModel) tabel_batalpesanan.getModel();
            tb_batal.setRowCount(0);

            while (rs.next()) {
                Vector columndata = new Vector();
                for (int i = 1; i < q; i++) {
                    columndata.add(rs.getString("ID_PESANAN"));
                    columndata.add(rs.getString("NO_ANTRIAN"));
                    columndata.add(rs.getString("ID_BAYAR"));
                }
                tb_batal.addRow(columndata);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage() + " - update_table batal");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pesanan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pesanan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pesanan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pesanan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pesanan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbl_back;
    private javax.swing.JLabel lbl_batal;
    private javax.swing.JLabel lbl_riwayat;
    private javax.swing.JLabel lbl_terima;
    private javax.swing.JTable tabel_batalpesanan;
    private javax.swing.JTable tabel_konfirmasipesanan;
    private javax.swing.JTable tabel_tunggupesanan;
    // End of variables declaration//GEN-END:variables
}
